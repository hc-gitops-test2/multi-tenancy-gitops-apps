apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-functional-test
  annotations:
    description: Perfrom functional tests
    app.openshift.io/description: Functional tests
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 0.0.0
spec:
  params:
  - name: git-url
    default: ""
  - name: git-revision
    default: master
  - name: source-dir
    default: /source
  - name: src-environment
    default: ""
  - name: test-file
    default: ""
  results:
    - name: app-name
  volumes:
    - name: source
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - name: source
        mountPath: $(params.source-dir)
  steps:
  - name: git-clone
    image: quay.io/ibmgaragecloud/alpine-git
    env:
      - name: GIT_PASSWORD
        valueFrom:
          secretKeyRef:
            name: git-credentials
            key: password
            optional: true
      - name: GIT_USERNAME
        valueFrom:
          secretKeyRef:
            name: git-credentials
            key: username
            optional: true
    script: |
      set +x
      if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
          git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
      else
          set -x
          git clone $(params.git-url) $(params.source-dir)
      fi
      set -x
      cd $(params.source-dir)
      git checkout $(params.git-revision)
  - name: resolve-route
    image: quay.io/openshift/origin-cli:latest
    workingDir: $(params.source-dir)
    script: |
      #!/bin/bash
      set -e
      SLEEP_TIME_SEC=10
      RETRIES=20

      SRC_ENV=$(echo $(params.src-environment) | cut -d "-" -f2)

      if [[ $(params.git-url) =~ $regex ]]; then
        GIT_PROTOCOL=${BASH_REMATCH[1]}
        GIT_SEPARATOR=${BASH_REMATCH[2]}
        GIT_HOST=${BASH_REMATCH[3]}
        GIT_ORG=${BASH_REMATCH[4]}
        GIT_REPO=${BASH_REMATCH[5]}
      else
        echo "Please provide a valid git url"
        exit 1
      fi

      echo -n "${GIT_REPO}">$(results.app-name.path)

      wait_until() {
        condition=$1
        message=$2
        retries=$RETRIES
        until $condition || [[ "$retries" -eq 0 ]]; do
          retries=$((retries - 1))
          sleep $SLEEP_TIME_SEC
        done
        if [[ "$retries" -eq 0 ]]; then
          echo $message
          exit 1
        fi
      }
      url_is_ready() {
        url=$1
        curl -s \
          https://$url 2>/dev/null
      }

      route=$(oc -n ${SRC_ENV} get route | awk '{if ($1 ~ "${GIT_REPO}") print $2}'

      echo -n $route > /source/route.txt
      wait_until "url_is_ready $route/" "Route is not set up"
  - name: run-test
    image: postman/newman:ubuntu
    workingDir: $(params.source-dir)
    script: |
      #!/bin/sh
      set -ex
      if [ ! -f /source/route.txt ]; then
        echo "This is a QueueManager ... Skipping this step"
        exit 0
      fi
      route=$(cat /source/route.txt)
      echo $route
      test_file="$(params.test-file)"
      if [ -e $test_file ]; then
        newman run \
          --env-var base-url=$route \
          $test_file
      else
        echo "Skipping tests ... Postman collections does not exist"
      fi
